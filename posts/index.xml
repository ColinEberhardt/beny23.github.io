<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tales about Software Engineering</title><link>https://beny23.github.io/posts/</link><description>Recent content in Posts on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Mon, 06 Dec 2021 12:48:32 +0000</lastBuildDate><atom:link href="https://beny23.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of code 2021: Day 5</title><link>https://beny23.github.io/posts/advent_of_code_2021_day_5/</link><pubDate>Mon, 06 Dec 2021 12:48:32 +0000</pubDate><guid>https://beny23.github.io/posts/advent_of_code_2021_day_5/</guid><description>Following from my efforts on Day 4 of Advent of Code 2021 I was encouraged to try writing up more of my attempts to teach myself Haskell while having fun trying to solve puzzles.
The problem The exercise was concerned with drawing lines on a grid and finding intersections:
An entry like 1,1 -&amp;gt; 1,3 covers points 1,1, 1,2, and 1,3. An entry like 9,7 -&amp;gt; 7,7 covers points 9,7, 8,7, and 7,7.</description></item><item><title>Advent of code 2021: Day 4</title><link>https://beny23.github.io/posts/advent_of_code_2021_day_4/</link><pubDate>Sun, 05 Dec 2021 08:48:32 +0100</pubDate><guid>https://beny23.github.io/posts/advent_of_code_2021_day_4/</guid><description>For Advent of Code 2021 rather than just thinking &amp;ldquo;Hey, what a good idea - I should give that a go&amp;rdquo; and then promptly forgetting about it, I thought it would be a good opportunity to explore Haskell a bit more.
On day 4 - when I started scratching my head for a bit - I discovered one interesting aspect about a functionally pure approach &amp;ldquo;forced&amp;rdquo; on me by Haskell.</description></item><item><title>Record and publish your meeting</title><link>https://beny23.github.io/posts/screen_record_meetings/</link><pubDate>Sun, 22 Aug 2021 21:43:47 +0100</pubDate><guid>https://beny23.github.io/posts/screen_record_meetings/</guid><description>Scenario: You&amp;rsquo;re in a handover session and explain everything in great detail but Dave is too hungover, Jim is on holiday and Jane is at another meeting and Chris isn&amp;rsquo;t asking any questions and in any case Trevor (who is actually going to be looking after this system after handover) hasn&amp;rsquo;t been recruited yet.
Wouldn&amp;rsquo;t it be useful to record the session and make it available? Now, this piece of writing does not explore whether we should be recording meetings, nor does it attempt to answer the question of whether good documentation wouldn&amp;rsquo;t be preferable to having to sit and spend hours watching someone droning on about something that could be condensed into a five minute read of a blog post.</description></item><item><title>Fizzbuzz without if clauses</title><link>https://beny23.github.io/posts/fizzbuzz_without_ifs/</link><pubDate>Thu, 04 Mar 2021 08:44:19 +0000</pubDate><guid>https://beny23.github.io/posts/fizzbuzz_without_ifs/</guid><description>In this writing I aim to complete a Fizzbuzz without if statements, conditionals, pattern matching or even using modulus calculations. And if that isn&amp;rsquo;t enough I thought I&amp;rsquo;d use the opportunity to explore Haskell.
The idea originated in the Friday lunchtime &amp;ldquo;Curry Club&amp;rdquo; at HMRC Digital where a few like-minded software engineers are getting together to teach themselves Haskell. (For those not in on the joke, the language is named after the logician Haskell Curry).</description></item><item><title>Exponential exploit: Why AppSec is hard</title><link>https://beny23.github.io/posts/one_plus_one_is_crash/</link><pubDate>Sun, 28 Feb 2021 01:50:10 +0000</pubDate><guid>https://beny23.github.io/posts/one_plus_one_is_crash/</guid><description>In this blog post, I would like to explore how missing input validation even in a trivial service can leave parts of server infrastructure crumbling.
In my opinion, this why securing applications (AppSec) is very difficult. Put supply chain attacks, unpatched systems and misconfiguring services to one side for a minute and consider that a lot of software is written by developers who do not necessarily consider all the edge cases or implications of what can go wrong even in the simplest of pieces of code (or just copy/paste from Stackoverflow).</description></item><item><title>Fixing Oracle DB Link Certificate Errors in RDS</title><link>https://beny23.github.io/posts/rds_tcps_db_link/</link><pubDate>Wed, 18 Nov 2020 01:19:35 +0000</pubDate><guid>https://beny23.github.io/posts/rds_tcps_db_link/</guid><description>After upgrading my AWS RDS instance from Oracle 11g Oracle 19c, my DB Link stopped working with a certificate error. Uh-oh.
The symptoms of the problem that I encountered are best summed up by this SQL*Plus snippet:
SQL&amp;gt; select * from dual@test1; select * from dual@test1 * ERROR at line 1: ORA-29024: Certificate validation failure A bit of context:
The above is testing an Oracle Database Link &amp;ldquo;test1&amp;rdquo; which was created using the TCPS protocol (i.</description></item><item><title>Social network distance</title><link>https://beny23.github.io/posts/social_network_distance/</link><pubDate>Wed, 16 Sep 2020 02:12:25 +0100</pubDate><guid>https://beny23.github.io/posts/social_network_distance/</guid><description>It&amp;rsquo;s now about two weeks since the HMRCs splurge on getting the UK to go out for a meal has finished. In discount dining finder I showed how to make a map-based tool to search all Eat Out to Help Out (EOTHO) establishments in very little time.
What follows is the story of what happened after the site launched, and how I failed to make a dent at marketing.
To recap:</description></item><item><title>Discounted Dining Finder</title><link>https://beny23.github.io/posts/discounted_dining_finder/</link><pubDate>Wed, 29 Jul 2020 23:55:11 +0100</pubDate><guid>https://beny23.github.io/posts/discounted_dining_finder/</guid><description>This post describes how I developed the Discount Dining Finder a lookup map tool for the Eat Out to Help Out scheme in my spare time. I currently work with Equal Experts and HMRC. The aim of this writing is to provide an insight into how problems of scaling services can be solved by having no servers and not using &amp;ldquo;serverless services&amp;rdquo; either.
Aperitif A really nice side effect in working in a high functioning environment is that sometimes you&amp;rsquo;re involved in bouncing ideas off each other.</description></item><item><title>The Shield and the Sword</title><link>https://beny23.github.io/posts/the_shield_and_the_sword/</link><pubDate>Sun, 19 Jul 2020 15:40:01 +0100</pubDate><guid>https://beny23.github.io/posts/the_shield_and_the_sword/</guid><description>To successfully deliver software a developer needs a shield and a sword.
A good product owner, delivery manager or alike that will shield the engineers from having to attend too many meetings, giving long-winded status updates and essentially allow them to get on with it. Shields go to all the meetings with the &amp;ldquo;business&amp;rdquo; and explain what can and cannot be done, without the engineer having to attend. A shield would also filter all the last-minute requirements or requests for gold plating without having to be dragged into endless meetings.</description></item><item><title>Making Software. Quickly.</title><link>https://beny23.github.io/posts/making_software_quickly/</link><pubDate>Sun, 19 Jul 2020 08:54:48 +0100</pubDate><guid>https://beny23.github.io/posts/making_software_quickly/</guid><description>In this post, I describe my personal experience of being part of a software development team working with Equal Experts and HMRC during Covid-19. Under normal circumstances, we&amp;rsquo;re responsible for tax services such as Self Assessment, PAYE Expenses and Benefits, VAT submissions amongst others. These services run on the Multi-channel Digital Tax Platform (MDTP). This platform is hosted in a hyperscale cloud (the cloud provider has a sideline selling books), run in-house by HMRC teams made up of permanent staff and consultants.</description></item><item><title>One million records in 15 seconds</title><link>https://beny23.github.io/posts/one_million_records_in_15s/</link><pubDate>Sat, 30 May 2020 10:29:17 +0100</pubDate><guid>https://beny23.github.io/posts/one_million_records_in_15s/</guid><description>In this post, I&amp;rsquo;d like to talk about optimisations that I recently used to provide a Scala Microservice that surfaced payment events. The events were held in an Oracle backend and the Microservice was in a docker container with (1 vCPU) allocated 512MB to the container and 256MB to the JVM that was running it. In this writing I&amp;rsquo;m not going to talk about the Oracle optimisations to make the underlying query fly but rather would like to concentrate on the kinds of things that can make service code quick.</description></item><item><title>Coerced to make Xerces think</title><link>https://beny23.github.io/posts/coerced_to_make_xerces_think/</link><pubDate>Fri, 03 Aug 2018 23:45:26 +0100</pubDate><guid>https://beny23.github.io/posts/coerced_to_make_xerces_think/</guid><description>More and more I&amp;rsquo;m thinking that XML is evil! This is the third part of my series on why, as a software engineer, it is very useful to think about the potentially dangerous combination of outdated libraries and XML.
I recently carried out a review of the dependency scanning results CVE-2012-0881:
Apache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.</description></item><item><title>How I learned to stop worrying and love a vulnerability</title><link>https://beny23.github.io/posts/how_i_learned_to_stop_worrying_and_love_a_vulnerability/</link><pubDate>Mon, 02 Jul 2018 10:22:14 +0100</pubDate><guid>https://beny23.github.io/posts/how_i_learned_to_stop_worrying_and_love_a_vulnerability/</guid><description>Security specialists. Arghhh! They&amp;rsquo;re all sitting in their &amp;lsquo;ivory tower&amp;rsquo; without anything better to do than to take a baseball bat to your hard work and tell you how you&amp;rsquo;ve not considered some obscure vulnerability CVE-142341231/4234 in a library that you didn&amp;rsquo;t even know existed. Not only that, there is definitely no way that you can deploy now, even when the product owner is breathing down your neck saying that nobody is going home until we&amp;rsquo;ve fixed this!</description></item><item><title>Hiding XXE in Spreadsheets</title><link>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</link><pubDate>Fri, 08 Jun 2018 12:24:08 +0100</pubDate><guid>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</guid><description>Recently I tried to poke holes in a service. I found myself laughing out loud. This was a vulnerability whereby modifying a SAML authentication while being rePOSTed via the browser allowed me to inject a malicious payload (see XML External Entity (XXE) Processing and XML External Entity (XXE) Prevention Cheat Sheet) that could be used to use up a service&amp;rsquo;s memory and CPU. Health checks and automatic service restarts would have healed the service but it still would have allowed an attacker to mount a Denial of Service attack without needing a lot of requests.</description></item><item><title>Laughing out loud - Malicious Reauthentication</title><link>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</link><pubDate>Mon, 04 Jun 2018 10:02:51 +0100</pubDate><guid>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</guid><description>Background I had found a vulnerability that made it is possible to insert maliciously crafted XML into the SAML payload that a reauthentication application returned to perform a Denial of Service (DoS) attack. The vulnerability came about due to the use of a out-of-date but still widely used library.
The service could have been made to consume a lot of CPU and memory causing it respond very slowly if at all.</description></item></channel></rss>