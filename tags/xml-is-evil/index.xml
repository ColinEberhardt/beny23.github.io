<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>xml-is-evil on Tales about Software Engineering</title><link>https://beny23.github.io/tags/xml-is-evil/</link><description>Recent content in xml-is-evil on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Fri, 03 Aug 2018 23:45:26 +0100</lastBuildDate><atom:link href="https://beny23.github.io/tags/xml-is-evil/index.xml" rel="self" type="application/rss+xml"/><item><title>Coerced to make Xerces think</title><link>https://beny23.github.io/posts/coerced_to_make_xerces_think/</link><pubDate>Fri, 03 Aug 2018 23:45:26 +0100</pubDate><guid>https://beny23.github.io/posts/coerced_to_make_xerces_think/</guid><description>More and more I&amp;rsquo;m thinking that XML is evil! This is the third part of my series on why, as a software engineer, it is very useful to think about the potentially dangerous combination of outdated libraries and XML.
I recently carried out a review of the dependency scanning results CVE-2012-0881:
Apache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.</description></item><item><title>Hiding XXE in Spreadsheets</title><link>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</link><pubDate>Fri, 08 Jun 2018 12:24:08 +0100</pubDate><guid>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</guid><description>Recently I tried to poke holes in a service. I found myself laughing out loud. This was a vulnerability whereby modifying a SAML authentication while being rePOSTed via the browser allowed me to inject a malicious payload (see XML External Entity (XXE) Processing and XML External Entity (XXE) Prevention Cheat Sheet) that could be used to use up a service&amp;rsquo;s memory and CPU. Health checks and automatic service restarts would have healed the service but it still would have allowed an attacker to mount a Denial of Service attack without needing a lot of requests.</description></item><item><title>Laughing out loud - Malicious Reauthentication</title><link>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</link><pubDate>Mon, 04 Jun 2018 10:02:51 +0100</pubDate><guid>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</guid><description>Background I had found a vulnerability that made it is possible to insert maliciously crafted XML into the SAML payload that a reauthentication application returned to perform a Denial of Service (DoS) attack. The vulnerability came about due to the use of a out-of-date but still widely used library.
The service could have been made to consume a lot of CPU and memory causing it respond very slowly if at all.</description></item></channel></rss>