<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Tales about Software Engineering</title><link>https://beny23.github.io/tags/java/</link><description>Recent content in java on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Sun, 28 Feb 2021 01:50:10 +0000</lastBuildDate><atom:link href="https://beny23.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Exponential exploit: Why AppSec is hard</title><link>https://beny23.github.io/posts/one_plus_one_is_crash/</link><pubDate>Sun, 28 Feb 2021 01:50:10 +0000</pubDate><guid>https://beny23.github.io/posts/one_plus_one_is_crash/</guid><description>In this blog post, I would like to explore how missing input validation even in a trivial service can leave parts of server infrastructure crumbling.
In my opinion, this why securing applications (AppSec) is very difficult. Put supply chain attacks, unpatched systems and misconfiguring services to one side for a minute and consider that a lot of software is written by developers who do not necessarily consider all the edge cases or implications of what can go wrong even in the simplest of pieces of code (or just copy/paste from Stackoverflow).</description></item></channel></rss>